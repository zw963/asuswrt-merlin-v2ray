#!/bin/sh

self="$(\curl -sS https://gitlab.com/zw963/deployment_bash/-/raw/v0.8.10/deploy_start.sh)" && eval "$self"
# self="$(cat /home/common/Project/deployment_bash/deploy_start.sh)" && eval "$self"

export_variable use_xtls="${use_xtls-true}"

if [ "$use_xtls" == "true" ]; then
    export_variable service_name=xray
    export_variable another_service_name=v2ray
else
    export_variable service_name=v2ray
    export_variable another_service_name=xray
fi

export_variable target=$1
export_variable old_uuid=$(ssh $target cat /etc/${service_name}/config.json 2>/dev/null |grep '"flow": "xtls-rprx' -A5 -B5 |grep '"id":' |cut -d: -f2 |cut -d'"' -f2)
export_variable old_port=$(ssh $target cat /etc/${service_name}/config.json 2>/dev/null |grep -A3 -B3 '"protocol":\s*"vless\|vmess"' |grep port |grep -o '[0-9]*')
export_variable old_reality_domain_name=$(ssh $target cat /etc/${service_name}/config.json 2>/dev/null |grep '"dest":' |cut -d':' -f2- |cut -d'"' -f2)
export_variable old_reality_private_key=$(ssh $target cat /etc/${service_name}/config.json 2>/dev/null |grep '"privateKey":' |cut -d: -f2- |cut -d'"' -f2)
export_variable old_ss_port=$(ssh $target cat /etc/${service_name}/config.json |grep '"protocol": "shadowsocks"' -A3 |grep port |grep -o '[0-9]*')
export_variable old_ss_method=$(ssh $target cat /etc/${service_name}/config.json |grep '"protocol": "shadowsocks"' -A5 |grep method |cut -d: -f2 |sed -e 's#.*"\(.*\)".*#\1#')
export_variable old_ss_password=$(ssh $target cat /etc/${service_name}/config.json |grep '"protocol": "shadowsocks"' -A5 |grep password |cut -d: -f2 |sed -e 's#.*"\(.*\)".*#\1#')
export_variable arch=${router_arch-linux-arm32-v5}

cat <<HEREDOC
Set \$router_arch env to e.g. \`linux-arm32-v5/' if you want deploy to an asuswrt merlin AC5300 router.
For the correct Arch name, check https://github.com/XTLS/Xray-core/releases assets.
The default arch will assume server and side router use linux-amd64, and router using ${arch}.

HEREDOC

function postinstall () {
    set -u
    mkdir -p ./downloaded_binary/linux-amd64/services ./downloaded_binary/${arch}
    echo
    echo 'Please wait copy generated client config into local machine ...'
    scp  $target:/etc/$service_name/client_config.json ./downloaded_binary/linux-amd64/client_config.json
    scp  $target:/usr/local/bin/{geoip-only-cn-private.dat,geoip.dat,geosite.dat,xray,v2ray} ./downloaded_binary/linux-amd64/
    scp  $target:/etc/systemd/system/{v2ray.service,v2ray@.service} ./downloaded_binary/linux-amd64/services/
    cp router/opt/etc/{apply_iptables_rule.sh,clean_iptables_rule.sh,update_geodata.sh} ./downloaded_binary/linux-amd64/

    (
        cd ./downloaded_binary/linux-amd64/
        chmod +x apply_iptables_rule.sh clean_iptables_rule.sh update_geodata.sh xray v2ray
    )

    cp ./downloaded_binary/linux-amd64/{geoip-only-cn-private.dat,geoip.dat,geosite.dat,config.json} ./downloaded_binary/${arch}/
    scp  $target:/tmp/v2ray-clients/{xray,v2ray} ./downloaded_binary/${arch}/

    echo "Run [0m[33m./deploy_router admin@router_ip[0m to deploy to router."
    echo "Run [0m[33m./deploy_side_router root@side_router_ip[0m to deploy to side_router."
}

# if grep -qs -e 'change_yours_password_here' ${service_name}_server.json; then
#     echo "$service_name served as a shadowsocks server too."
#     echo "You must change \`[0m[33mchange_yours_password_here[0m' to a NEW password in \`./${service_name}_server.json'!"
#     exit
# fi

# password=$(cat ${service_name}_server.json |grep '"password"' |cut -d':' -f2 |cut -d'"' -f2)
# sed -i "s#change_yours_password_here#${password}#" "${another_service_name}_server.json"


ssh $target "[ -e /etc/${service_name}/config.json ] && cp -a /etc/${service_name}/config.json /etc/${service_name}/config.json.$(date '+%Y-%m-%d_%H:%M:%S')"
copy ${service_name}_server.json /etc/${service_name}/config.json

if [ "${service_name}" == xray ]; then
    copy downloaded_binary/linux-amd64/services/xray.service /etc/systemd/system/xray.service
    copy downloaded_binary/linux-amd64/services/xray@.service /etc/systemd/system/xray@.service
fi

deploy_start

set -eu

# --------------------------------------------------------------------------------
#
# Following script will be run on remote VPS, please change it to meet your's need.
#
# -------------------------------------------------------------------------------

# wget https://install.direct/go.sh
# bash go.sh

if [ -f /etc/systemd/system/$service_name.service ]; then
    set +e
    systemctl stop $service_name
    systemctl stop $another_service_name
    systemctl disable $another_service_name
    systemctl daemon-reload
    set -e
fi

xray_version=$(github_latest_release XTLS/Xray-core)
v2ray_version=$(github_latest_release v2fly/v2ray-core)

set -e

(
    download_and_extract https://github.com/XTLS/Xray-core/releases/download/${xray_version}/Xray-linux-64.zip Xray-${xray_version}-linux-64

    cd Xray-${xray_version}-linux-64 && chmod +x xray

    if ! ./xray version &>/dev/null; then
        echo 'Invalid xray version/arch, please download correct version.'
        exit
    fi

    cp xray *.dat /usr/local/bin
)

(
    download_and_extract https://github.com/XTLS/Xray-core/releases/download/${xray_version}/Xray-${arch}.zip Xray-${xray_version}-${arch}

    mkdir -p /tmp/v2ray-clients
    cd Xray-${xray_version}-${arch} && cp xray *.dat /tmp/v2ray-clients
)

(
    download_and_extract https://github.com/v2fly/v2ray-core/releases/download/${v2ray_version}/v2ray-linux-64.zip v2ray-${v2ray_version}-linux-64

    cd v2ray-${v2ray_version}-linux-64 && chmod +x v2ray

    if ! ./v2ray version &>/dev/null; then
        echo 'Invalid v2ray version/arch, please download correct version.'
        exit
    fi

    cp v2ray *.dat /usr/local/bin &&
        cp systemd/system/*.service /etc/systemd/system
)

(
    download_and_extract https://github.com/v2fly/v2ray-core/releases/download/${v2ray_version}/v2ray-${arch}.zip v2ray-${v2ray_version}-${arch}

    mkdir -p /tmp/v2ray-clients
    cd v2ray-${v2ray_version}-${arch} && cp v2ray *.dat /tmp/v2ray-clients
)

replace_regex 'RestartPreventExitStatus=23' 'RestartPreventExitStatus=23
# Added by user
LimitNPROC=500
LimitNOFILE=1000000' /etc/systemd/system/v2ray.service
replace_regex 'RestartPreventExitStatus=23' 'RestartPreventExitStatus=23
# Added by user
LimitNPROC=500
LimitNOFILE=1000000' /etc/systemd/system/v2ray@.service
replace_regex '/usr/local/etc/v2ray/config.json' '/etc/v2ray/config.json' /etc/systemd/system/v2ray.service
replace_regex '/usr/local/etc/v2ray/%i.json' '/etc/v2ray/%i.json' /etc/systemd/system/v2ray@.service

mkdir -p /var/log/xray /var/log/v2ray
# chown nobody:nobody /var/log/xray /var/log/v2ray

if [ "$old_uuid" != NEWUUID ]; then
    echo "Old uuid $old_uuid exists, use it."
    uuid=$old_uuid
else
    uuid=$(cat /proc/sys/kernel/random/uuid)
fi

replace_string 'NEWUUID' "${uuid}" /etc/${service_name}/config.json

# quic_key=$(uuidgen | sed 's/[-]//g' | head -c 20)

if [ -n "$old_port" ]; then
    replace_multiline1 '("protocal":\s*"vless",.*?)"port":\s*[0-9]*,' '$1"port":'" ${old_port}" /etc/${service_name}/config.json
    v2ray_port=$old_port
else
    v2ray_port=$(cat /etc/$service_name/config.json |grep '"inbounds"' -A10 |grep '"protocol" *: *"\(vmess\|vless\)"' -A3 |grep '"port"' |grep -o '[0-9]*')
fi

if [ -n "$old_ss_port" ]; then
    replace_multiline1 '("protocol": "shadowsocks",.*"port": )\d+' '${1}'"${old_ss_port}" /etc/${service_name}/config.json
    ss_port=$old_ss_port
else
    ss_port=$(cat /etc/${service_name}/config.json 2>/dev/null |grep -A3 -B3 '"protocol":\s*"vless\|vmess"' |grep port |grep -o '[0-9]*')
fi

if [ -n "$old_ss_method" ]; then
    replace_regex1 '"method": ".*"' "\"method\": \"${old_ss_method}\"" /etc/${service_name}/config.json
    ss_method=$old_ss_method
else
    ss_method=$(cat /etc/${service_name}/config.json |grep '"protocol": "shadowsocks"' -A5 |grep method |cut -d: -f2 |sed -e 's#.*"\(.*\)".*#\1#')
fi

if [[ -n "$old_ss_password" ]] && [[ "$old_ss_password" != "SSPASS" ]]; then
    replace_regex1 '"password": ".*"' "\"password\": \"${old_ss_password}\"" /etc/${service_name}/config.json
    ss_password=$old_ss_password
else
    # 生成的密钥长度与 2022-blake3-chacha20-poly1305 2022-blake3-aes-256-gcm 兼容
    ss_password=$(openssl rand -base64 32)
fi

config_sysctl_for_proxy

systemctl enable $service_name

if [ "$use_xtls" == "true" ]; then
    if [ -z "$old_reality_domain_name" ]; then
        # 使用 xray_server.json 中的默认配置，即: www.hko.gov.hk:443
        # 还可以选择香港运输署 www.td.gov.hk
        # 韩国推荐 freegame.gg
        # 要求: 1. HTTP/2+ 2. TLS 1.3+
        reality_domain_name=$(cat /etc/${service_name}/config.json |grep '"dest":' |cut -d':' -f2- |cut -d'"' -f2)
        client_server_name=$(echo ${reality_domain_name} |cut -d: -f1)

        echo "reality domain name use ${reality_domain_name}"
    else
        # 使用上次部署的配置
        reality_domain_name=$old_reality_domain_name
        client_server_name=$(echo ${reality_domain_name} |cut -d: -f1)

        echo "Using exists reality domain name ${old_reality_domain_name}..."

        replace_regex1 '"dest": ".*"' "\"dest\": \"${reality_domain_name}\"" /etc/${service_name}/config.json
        replace_regex '"serverNames": \[".*"\]' "\"serverNames\": [\"${client_server_name}\"]" /etc/${service_name}/config.json
    fi

    if [ -n "$old_reality_private_key" ] && [[ "$old_reality_private_key" != "REALITY_PRIVATE_KEY_HERE" ]]; then
        echo "Use exists x25519 key pairs ..."

        reality_private_key=$old_reality_private_key
        reality_public_key=$(/usr/local/bin/xray x25519 -i $reality_private_key |tail -n1 |cut -d: -f2 |cut -d' ' -f2)
    else
        # 重新生成
        echo "Geneate new x25519 key pairs ..."

        key_pairs=$(/usr/local/bin/xray x25519)
        reality_private_key=$(echo "$key_pairs" |head -n1 |cut -d: -f2 |cut -d' ' -f2)
        reality_public_key=$(echo "$key_pairs" |tail -n1 |cut -d: -f2 |cut -d' ' -f2)
    fi


    replace_string 'REALITY_PRIVATE_KEY_HERE' "$reality_private_key" /etc/${service_name}/config.json
fi

# geoip_version=$(github_latest_release v2fly/geoip)
# wget https://github.com/v2fly/geoip/releases/download/${geoip_version}/geoip-only-cn-private.dat -o geoip-only-cn-private.dat

systemctl restart $service_name
systemctl status $service_name
systemctl enable $service_name

expose_port $v2ray_port
expose_port $ss_port

set -u
cat <<HEREDOC > /etc/$service_name/client_config.json
// 本脚本当运行 deploy_server 时自动生成。
// 本脚本可作为 普通 v2ray 客户端脚本，也可以作为 ASUS 梅林路由器/旁路由 透明代理脚本，
// 运行 ./deploy_router admin@router.asus.com 部署这个配置文件到路由器。
// 运行 ./deploy_side_router root@one_ip 部署这个配置文件到旁路由。
{
    "log": {
        "loglevel": "warning"
    },
    "dns": {
        "hosts": {
            "geosite:category-ads-all": "127.0.0.1"
        },
        "servers": [
            // V2Ray 会使用 DNS over HTTPS (RFC8484, 简称DOH) 进行查询。
            // DoH 默认走第一个 outbound 来查询 （DoH 域名需要在 hosts 中指定 IP 地址）
            "8.8.4.4",
	    "1.1.1.1",
            {
                // 180.76.76.76 是百度的 DNS，你可以替换为当地运营商的
                // 这里之前是 localhost, 造成了死循环，严重影响访问国内网站的性能。
                "address": "180.76.76.76",
                "port": 53,
                "domains": [
                    "geosite:cn"
                ],
                "expectIPs": [
                    "ext:geoip-only-cn-private.dat:cn"
                ]
            },
            {
                "address": "8.8.4.4",
                "port": 53,
                "domains": [
                    "services.googleapis.cn",
                    "googleapis.com",
                    "gstatic.com",
                    "xn--ngstr-lra8j.com",
                    "googleusercontent.com"
                ]
            },
            {
                // fakeDNS 必须，否则会被解析为 fake IP.
                // 注意，某些视频网站视频无法播放，貌似就是因为访问网站时，
                // 解析到错误的 IP 地址。
                "address": "180.76.76.76",
                "port": 53,
                "domains": [
                    "router.asus.com",
                    "arch.pool.ntp.org",
                    "dl.google.com",
                    "sourceforge.net",
                    "380tv.com",
                    "vidhub.tv",
                    "staticfile.org",
                    "www.naifei.im",
                    "crystal-lang.org",
                    "yzzy-online.com",
                    "cjkypo.com",
                    "gitlab.com",
                    "fonts.gstatic.com",
                    "fonts.googleapis.com",
                    "scootersoftware.com",
                    "archlinux.org",
                    "woaimoon.net",
		    "bing.com"
                ]
            }
        ],
        // 默认为 false, 开启后，如果通过默认的 DNS 访问返回结果不匹配 cn site/ip,
        // 将使用 servers 里面的第一个，8.8.4.4 访问。
        "disableFallback": true
    },
    "routing": {
        "rules": [
            {
                // tproxy 透明代理必需。
                "type": "field",
                "inboundTag": ["transparent"],
                "port": 53,
                "network": "udp",
                "outboundTag": "dns-outbound"
            },
            {
                "type": "field",
                "domain": [
                    // 这里添加域名白名单.
                    "geosite:cn",
                    "router.asus.com",
                    "arch.pool.ntp.org",
                    "dl.google.com",
                    "sourceforge.net",
                    "380tv.com",
                    "vidhub.tv",
                    "staticfile.org",
                    "www.naifei.im",
                    "crystal-lang.org",
                    "yzzy-online.com",
                    "cjkypo.com",
                    "gitlab.com",
                    "fonts.gstatic.com",
                    "fonts.googleapis.com",
                    "scootersoftware.com",
                    "archlinux.org",
                    "woaimoon.net",
		    "bing.com"
                ],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "ip": ["180.76.76.76"],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "ip": [
                    "ext:geoip-only-cn-private.dat:cn",
                    "ext:geoip-only-cn-private.dat:private"
                ],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "inboundTag": ["transparent"],
                "port": "123,323",
                "network": "udp",
                "outboundTag": "direct"
            },
            { // BT 流量直连
                "type": "field",
                "protocol":["bittorrent"],
                "outboundTag": "direct"
            },
            {
                "type": "field",
                "ip": ["8.8.4.4"],
                "outboundTag": "proxy"
            },
            {
                "type": "field",
                "domain": [
                    // 这里添加必须走 proxy 的域名例外.
                    // "services.googleapis.cn",
                    "raw.githubusercontent.com",
                    "github.githubassets.com",
                    "services.googleapis.cn",
                    "googleapis.com",
                    "xn--ngstr-lra8j.com"
                ],
                "outboundTag": "proxy"
            },
            {
                "type": "field",
                "domain": [
                    "geosite:category-ads-all"
                ],
                "outboundTag": "block"
            }
        ]
    },
    "inbounds": [
        {
            "tag": "transparent",
            "protocol": "dokodemo-door",
            "port": 1081, // 透明代理 1081 端口
            "settings": {
                "network": "tcp,udp",
                // 当值为 true 时，dokodemo-door 会识别出由 iptables 转发而来的数据，并转发到相应的目标地址。详见 传输配置 中的 tproxy 设置。
                "followRedirect": true
            },
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls"]
            },
            "streamSettings": {
                "sockopt": {
                    // 当 Dokodemo-door 中指定了 followRedirect，且 sockopt.tproxy 为空时，
                    // sockopt.tproxy 的值会被设为 "redirect"，因此该设定 redirect 模式非必须的。
                    // 下面的选项会在 patch_router 的时候，自动选择 tproxy/redirect, 并被替换。
                    "tproxy": "tproxy",
                    "mark": 255
                }
            }
        },
        {
            "protocol": "socks", // 入口协议为 SOCKS 5
            "port": 1080, // 监听端口
            "settings": {
                "auth": "noauth"  //socks的认证设置，noauth 代表不认证，由于 socks 通常在客户端使用，所以这里不认证
            },
            "sniffing": {
                "enabled": true,
                "destOverride": ["http", "tls"]
            }
        },
        {
            "protocol": "http",
            "port": 3128,
            "settings": {
                "timeout": 0
            }
        }
    ],
    "outbounds": [
        // 下面两个顺序不可以颠倒, 因为列表中的第一个元素作为主出站协议, 当路由匹配不存在或没有匹配成功时，
        // 流量由主出站协议发出, 我们要确保主出站协议必须是 proxy.
        {
            "tag": "proxy",
            "protocol": "vless", // 出口协议
            "settings": {
                "vnext": [
                    {
                        "address": "$targetip", // 服务器地址，请修改为你自己的服务器 IP 或域名
                        "port": $v2ray_port,  // 服务器端口
                        "users": [
                            {
                                // 注意, vmess 加密默认开启, 也必须开启, 否则上不了网.
                                // alterId 默认为 0, 表示开启 VMessAEAD.
                                // vless 则默认关闭加密 none，但必须有这个设定
                                "encryption": "none",
                                // Splice 模式的的使用限制：

                                // Linux 环境
                                // 入站协议为 Dokodemo door、Socks、HTTP 等纯净的 TCP 连接, 或其它使用了 XTLS 的入站协议
                                // 出站协议为 VLESS + XTLS
                                // 需要注意的是，使用 mKCP 协议时不会使用 Splice（是的，虽然没有报错，但实际上根本没用到
                                // 此外，使用 Splice 时网速显示会滞后，这是特性，不是 bug。
                                // 使用 Vision 模式 如果满足上述条件 会自动启用 Splice
                                "flow": "xtls-rprx-vision",
                                "id": "$uuid"  // 用户 ID，必须与服务器端配置相同
                            }
                            ]
                    }
                    ]
            },
            "streamSettings": {
                "network": "tcp",
                // reality 方式，用户无需拥有自己的域名，可以使用任何合法的网站，速度也更快。
                "security": "reality",
                "realitySettings": {
                    "fingerprint": "chrome",
                    "serverName": "${client_server_name}",
                    "publicKey": "${reality_public_key}"
                },
                "sockopt": {
                    "tcpcongestion": "bbr", // 如果不设定，会自动使用系统设置
                    "tcpMptcp": true,
                    "tcpNoDelay": true,
                    "mark": 255
                }
            }
        },
        {
            "protocol": "shadowsocks",
            "settings": {
                "servers": [
                    {
                        "address": "$targetip", // Shadowsocks 的服务器地址
                        "method": "$ss_method", // Shadowsocks 的加密方式
                        "password": "$ss_password", // Shadowsocks 的密码
                        "port": $ss_port
                    }
                ]
            },
            "streamSettings": {
                "sockopt": {
                    "mark": 255
                }
            }
        },
        {
            // 识别这是一个 DNS 请求， 并发送到内部 DNS 进行查询.
            "tag": "dns-outbound",
            "protocol": "dns",
            "proxySettings": {
                "tag": "proxy"
            },
            "streamSettings": {
                "sockopt": {
                    "mark": 255
                }
            }
        },
        {
            "tag": "direct",
            "protocol": "freedom",
            "settings": {
                // 这里我选择加上试试, 搞不好我的方案, freedom 真的又去访问 dnsmasq
                // 的 53 端口, 又被转到 V2ray 的 DNS 呢.
                "domainStrategy": "UseIPv4"
            },
            "streamSettings": {
                "sockopt": {
                    "mark": 255
                }
            }
        },
        {
            "tag": "block",
            "protocol": "blackhole",
            "settings": {
                "response": {
                    "type": "http"
                }
            }
        }
        ],
    "policy": {
        "levels": {
            "0": {
                "bufferSize": 4
            }
        }
    }
}
HEREDOC

if [ "$use_xtls" != true ]; then
    replace_string '"protocol": "vless",' '"protocol": "vmess",' /etc/$service_name/client_config.json
    replace_multiline1 '"encryption": "none",\s*"flow": "xtls-rprx-.*?",' '' /etc/$service_name/client_config.json
    replace_multiline1 '"network": "tcp",\s*"security":.*?},' '"network": "quic",
               "quicSettings": {
                    "header": {
                        "type": "wechat-video"
                    }
                },' /etc/$service_name/client_config.json
fi

echo 'Congratulations, Deploy succssful!'
